#!/usr/bin/env node

const fs = require("fs");
const WebTorrent = require("webtorrent-hybrid");
const CryptoJS = require("crypto-js");
const secureRandom = require("./secure-random");
const colors = require("colors");
const path = require("path");
const moment = require("moment");

const humanSize = (bytes, si) => {
    var thresh = si ? 1000 : 1024;
    if (Math.abs(bytes) < thresh) {
        return bytes + ' B';
    }
    var units = si
        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    var u = -1;
    do {
        bytes /= thresh;
        ++u;
    } while (Math.abs(bytes) >= thresh && u < units.length - 1);
    return bytes.toFixed(1) + ' ' + units[u];
};

let timeoutTimer;

const filename = process.argv[2];

if (!filename) {
    console.log("Syntax: " + process.argv[1] + " <filename>");
    return;
}


const onTorrent = (torrent) => {
    console.log(`Info Hash: ${torrent.infoHash}`.cyan);
    // generate secure url:
    const password = CryptoJS.SHA512(secureRandom.randomBuffer(256).toString()).toString();

    const crypto = CryptoJS.AES.encrypt(JSON.stringify({
        infoHash: torrent.infoHash,
        filename: torrent.name
    }), password);

    const downloadUrl = "https://peer.cat/#" + crypto + ":" + password;
    console.log(`File: ${torrent.name}`.cyan);
    console.log(`Size: ${humanSize(torrent.length, true)}`.cyan);
    console.log("");
    console.log("Share this URL with your friends: ".gray);
    console.log(downloadUrl);
    console.log("");
    console.log("Press CTRL+C to delete and quit.".gray);
    console.log("");
    torrent.on("upload", function(){

    });

    setInterval(function() {
        process.stdout.clearLine();  // clear current text
        process.stdout.cursorTo(0);  // move cursor to beginning of line
        process.stdout.write(
            "UP: ".gray + (humanSize(torrent.uploadSpeed, true) + "/s ").cyan +
            ("\tPEERS: ".gray) + ((torrent.numPeers ? torrent.numPeers : 0) + " ").cyan +
            "\tTRANSFER: ".gray + (humanSize(torrent.uploaded, true).cyan)
        );  // write text
    }, 300);
};

let progressTimer;
const onTorrentDownload = (torrent) => {
    clearTimeout(timeoutTimer);
    console.log(`Info Hash: ${torrent.infoHash}`.cyan);
    console.log(`File: ${torrent.name}`.cyan);
    console.log(`Size: ${humanSize(torrent.length, true)}`.cyan);
    console.log("");
    console.log("Press CTRL+C to delete and quit.".gray);
    console.log("");

    torrent.on("done", function(){
        clearInterval(progressTimer);
        console.log("");
        console.log("File download complete".gray);
        torrent.files.forEach(file => {
            let savePath = torrent.infoHash + "-" + torrent.name;
            
            file.createReadStream().pipe(fs.createWriteStream(savePath, "utf-8"));
    
            console.log("Saved: ".gray + file.name.cyan.bold + " here: ".gray + savePath);;
        });

        process.exit(0);
    });

    progressTimer = setInterval(function() {
        process.stdout.clearLine();  // clear current text
        process.stdout.cursorTo(0);  // move cursor to beginning of line
        process.stdout.write(
            "DOWN: ".gray + (humanSize(torrent.downloadSpeed, true) + "/s ").cyan +
            "\tPROGRESS: ".gray + ((torrent.progress * 100).toFixed(2)).cyan +
            ("\tETA: ".gray) + (moment.duration(torrent.timeRemaining, "milliseconds").humanize().cyan) 
        );  
    }, 300);
};


if (!fs.existsSync(filename)) {
    // User may want to download existing file, lets read hash
    console.log("Trying to retrieve file from peer.cat".yellow)
    console.log(filename.gray);
    console.log("");
    let infoHash;
    if (filename.indexOf("peer.cat/") !== false){
        const url = process.argv[2];
        // user passed complete url
        const secret = url.split("#")[1];
        const [ infoHashEnc, password ] = secret.split(":");
        const data = JSON.parse(CryptoJS.AES.decrypt(infoHashEnc, password).toString(CryptoJS.enc.Utf8));
         infoHash = data.infoHash;
        const filename = data.filename;
    } else {
         infoHash = filename;
    }

    console.log(("Fetching: " + infoHash + "").gray);

    const client = new WebTorrent();
    client.add(infoHash, onTorrentDownload);

    timeoutTimer = setTimeout(() => {
        console.log("This file might not be available anymore.".red);
        process.exit(1);
    }, 6000);

    return;
}


const client = new WebTorrent();
console.log(`Offering file ${filename} through peer.cat...`.yellow);

setTimeout(() => {
    client.seed(path.resolve(filename), onTorrent);
}, 1);